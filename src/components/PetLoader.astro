---
---
<script>
    function createPetElement(spriteSheetPath: string, frameSize: number): HTMLDivElement {
        const pet = document.createElement('div');
        pet.id = 'pet';
        pet.style.width = `${frameSize}px`;
        pet.style.height = `${frameSize}px`;
        pet.style.position = 'fixed';
        pet.style.pointerEvents = 'none';
        pet.style.backgroundImage = `url('${spriteSheetPath}')`;
        pet.style.backgroundSize = 'auto';
        pet.style.imageRendering = 'pixelated';
        pet.style.zIndex = '999';


        document.body.appendChild(pet);
        return pet;
    }

    // Animation states
    interface StateConfig {
        y: number;
        frames: number;
    }

    const STATES: Record<string, StateConfig> = {
        N: { y: 0, frames: 2 },
        NE: { y: 1, frames: 2 },
        E: { y: 2, frames: 2 },
        SE: { y: 3, frames: 2 },
        S: { y: 4, frames: 2 },
        SW: { y: 5, frames: 2 },
        W: { y: 6, frames: 2 },
        NW: { y: 7, frames: 2 },
        STANDING: { y: 8, frames: 2 }
    };

    class PetController {
        private pet: HTMLDivElement;
        private frameSize: number;
        private x: number;
        private y: number;
        private currentFrame: number;
        private currentState: string;
        private frameCount: number;
        private mouseX: number;
        private mouseY: number;

        constructor(spriteSheetPath: string, frameSize: number = 128) {
            this.frameSize = frameSize;
            this.pet = createPetElement(spriteSheetPath, frameSize);
            this.x = frameSize;
            this.y = frameSize;
            this.currentFrame = 0;
            this.currentState = 'STANDING';
            this.frameCount = 0;
            this.mouseX = 0;
            this.mouseY = 0;

            this.handleMouseMove = this.handleMouseMove.bind(this);
            document.addEventListener('mousemove', this.handleMouseMove);
            this.animate = this.animate.bind(this);
            requestAnimationFrame(this.animate);
        }

        handleMouseMove(event: MouseEvent): void {
            this.mouseX = event.clientX;
            this.mouseY = event.clientY;
        }

        determineState(): string {
            const dx = this.mouseX - this.x;
            const dy = this.mouseY - this.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance < this.frameSize / 2) {
                return 'STANDING';
            }

            const angle = Math.atan2(dy, dx) * 180 / Math.PI;
            let newState: string;

            if (angle < -157.5) newState = 'W';
            else if (angle < -112.5) newState = 'NW';
            else if (angle < -67.5) newState = 'N';
            else if (angle < -22.5) newState = 'NE';
            else if (angle < 22.5) newState = 'E';
            else if (angle < 67.5) newState = 'SE';
            else if (angle < 112.5) newState = 'S';
            else if (angle < 157.5) newState = 'SW';
            else newState = 'W';
            return newState;
        }

        updatePosition(): void {
            const dx = this.mouseX - this.x;
            const dy = this.mouseY - this.y;
            const distance = Math.sqrt(dx * dx + dy * dy);

            if (distance >= this.frameSize / 2) {
                const speed = this.frameSize / 32;
                this.x += (dx / distance) * speed;
                this.y += (dy / distance) * speed;
            }

            this.pet.style.left = `${this.x - this.frameSize/2}px`;
            this.pet.style.top = `${this.y - this.frameSize/2}px`;
        }

        updateAnimation(): void {
            this.frameCount++;

            if (this.frameCount >= 15) {
                this.frameCount = 0;
                this.currentFrame = (this.currentFrame + 1) % STATES[this.currentState].frames;
            }

            const frameX = this.currentFrame * this.frameSize;
            const frameY = STATES[this.currentState].y * this.frameSize;
            this.pet.style.backgroundPosition = `-${frameX}px -${frameY}px`;
        }

        animate(): void {
            const newState = this.determineState();
            if (newState !== this.currentState) {
                this.currentState = newState;
                this.currentFrame = 0;
                this.frameCount = 0;
            }
            this.updatePosition();
            this.updateAnimation();
            requestAnimationFrame(this.animate);
        }

        destroy(): void {
            document.removeEventListener('mousemove', this.handleMouseMove);
            this.pet.remove();
        }
    }

    // Initialize when DOM loads
    document.addEventListener('DOMContentLoaded', () => {
        const pet = new PetController('/amshaei/pixelrat-spritesheet.png', 128);
        window.addEventListener('unload', () => pet.destroy());
    });
</script>